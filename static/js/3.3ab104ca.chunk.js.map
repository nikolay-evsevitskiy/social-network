{"version":3,"sources":["hoc/WithAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","componets/Profile/Profile.module.css","componets/Profile/ProfileInfo/ProfileInfo.module.css","componets/Profile/MyPosts/MyPosts.module.css","componets/Profile/MyPosts/Post/Post.module.css","componets/Profile/ProfileInfo/ProfileStatus/ProfileStatusOnFunctionComponent.tsx","componets/Profile/ProfileInfo/ProfileInfo.tsx","componets/Profile/MyPosts/Post/Post.tsx","componets/Profile/MyPosts/ProfileForm/ProfileFormMyPosts.tsx","componets/Profile/MyPosts/MyPosts.tsx","componets/Profile/MyPosts/MyPostsContainer.ts","componets/Profile/Profile.tsx","componets/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","data","WithAuthRedirect","Component","connect","props","restProps","to","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatusOnFC","statusProps","updateStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","type","ProfileInfo","profile","photos","alt","src","large","fullName","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","className","style","imgOfLookingFor","lookingForAJobDescription","Preloader","isFetching","Post","s","item","message","likes","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","React","PureComponent","memo","postElements","posts","map","p","id","main","values","addPost","addPostBody","MyPostsContainer","profilePage","dispatch","postAdd","Profile","content","newPostText","ProfileAPIComponent","userId","this","match","params","authorizedUserId","history","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.3ab104ca.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.data.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsForRedirectType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return (\r\n            <Component {...restProps as T} />\r\n        );\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1tuP6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgOfLookingFor\":\"ProfileInfo_imgOfLookingFor__2EnOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"MyPosts_main__2wbN9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3g4jw\",\"message\":\"Post_message__10sAs\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    statusProps: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusOnFC: React.FC<ProfileStatusType> = ({statusProps, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(statusProps)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    useEffect(() => {\r\n        if (statusProps !== status) {\r\n            setStatus(statusProps)\r\n        }\r\n    }, [statusProps])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && <div>\r\n                <span onDoubleClick={activateEditMode}><b>{statusProps || 'No status'}</b></span>\r\n            </div>}\r\n            {editMode && <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       type=\"text\"\r\n                       value={status}/>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusOnFC;\r\n","import React from 'react';\r\nimport {ProfileStateType} from \"../../../Redux/profile-reducer\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport style from './ProfileInfo.module.css'\r\nimport ProfileStatusOnFC from './ProfileStatus/ProfileStatusOnFunctionComponent';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileStateType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({profile, status, updateStatus}) => {\r\n    if (!profile.photos || !profile) {\r\n        return <Preloader isFetching={true}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\r\n                    <img alt={'Profile photo'} src={profile.photos.large}/>\r\n                    Status:<ProfileStatusOnFC statusProps={status} updateStatus={updateStatus}/>\r\n\r\n                </div>\r\n                <div>Full name: {profile.fullName}</div>\r\n                <div>\r\n                    About me: {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    Contacts:\r\n                    <ul>\r\n                        <li>facebook: {profile.contacts.facebook}</li>\r\n                        <li>website: {profile.contacts.website}</li>\r\n                        <li>vk: {profile.contacts.vk}</li>\r\n                        <li>twitter: {profile.contacts.twitter}</li>\r\n                        <li>instagram: {profile.contacts.instagram}</li>\r\n                        <li>youtube: {profile.contacts.youtube}</li>\r\n                        <li>github: {profile.contacts.github}</li>\r\n                        <li>mainLink: {profile.contacts.mainLink}</li>\r\n                    </ul>\r\n                </div>\r\n                <div>\r\n                    <p>\r\n                        LOOKING FOR A JOB!!!!\r\n                        <div>\r\n                            {profile.lookingForAJob && <img className={style.imgOfLookingFor}\r\n                                                            src=\"https://cdn1.vectorstock.com/i/1000x1000/88/00/looking-for-a-job-vector-19278800.jpg\"\r\n                                                            alt=\"loking for a job\"/>}\r\n                        </div>\r\n                    </p>\r\n                    <p>Description: {profile.lookingForAJobDescription}</p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype messagePropsType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nfunction Post(props:messagePropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img src=\"https://www.esafety.gov.au/sites/default/files/2019-08/Remove%20images%20and%20video.jpg\"/>\r\n                <span className={s.message}>{props.message}</span>\r\n                <div><button>like {props.likes} </button></div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\n\r\ntype FormDataProfileType = {\r\n    values: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const ProfileFormMyPosts: React.FC<InjectedFormProps<FormDataProfileType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea}\r\n                   name={'addPostBody'}\r\n                   placeholder={'Add post'}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>\r\n                Add post\r\n            </button>\r\n        </div>\r\n    </form>\r\n\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<FormDataProfileType>({form: 'AddPostForm'})(ProfileFormMyPosts)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostsType} from \"../../../Redux/profile-reducer\";\r\nimport {AddPostFormRedux} from \"./ProfileForm/ProfileFormMyPosts\";\r\n\r\ntype PropType = {\r\n    addPost: (value: string) => void\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\nexport class MyPostsComponent extends React.PureComponent<PropType> {\r\n\r\n\r\n    render() {\r\n        const addPost = (values: any) => {\r\n            this.props.addPost(values.addPostBody)\r\n        }\r\n        const postElements = this.props.posts.map((p) => <Post message={p.message} likes={p.likes} key={p.id}/>)\r\n        return (\r\n            <div className={s.main}>\r\n                <div>\r\n                    My posts\r\n                </div>\r\n                <div>\r\n                    <AddPostFormRedux onSubmit={addPost}/>\r\n                </div>\r\n                {postElements}\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropType) => {\r\n\r\n        const addPost = (values: any) => {\r\n            props.addPost(values.addPostBody)\r\n        }\r\n        const postElements = props.posts.map((p) => <Post message={p.message} likes={p.likes} key={p.id}/>)\r\n        return (\r\n            <div className={s.main}>\r\n                <div>\r\n                    My posts\r\n                </div>\r\n                <div>\r\n                    <AddPostFormRedux onSubmit={addPost}/>\r\n                </div>\r\n                {postElements}\r\n            </div>\r\n\r\n        )\r\n    }\r\n)\r\n\r\nexport default MyPosts;","import {postAdd, PostsType} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (value: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (value: string) => {\r\n            dispatch(postAdd(value))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileStateType} from \"../../Redux/profile-reducer\";\r\n\r\ntype ProfileType = {\r\n    profile: ProfileStateType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfileType> = ({profile, status, updateStatus}) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer newPostText={'CHECK'}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileStateType, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {Profile} from \"./Profile\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileStateType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = OwnPropsType & RouteComponentProps<PathParamsType>\r\n\r\n\r\nclass ProfileAPIComponent extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}/>\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    isAuth: state.auth.data.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.data.id\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        updateStatus,\r\n        getStatus\r\n    })\r\n)(ProfileAPIComponent)"],"sourceRoot":""}