{"version":3,"sources":["hoc/WithAuthRedirect.tsx","componets/Dialogs/Dialogs.module.css","componets/Dialogs/DialogItem/DialogItem.module.css","componets/Dialogs/Message/Message.module.css","componets/Dialogs/DialogItem/DialogItem.tsx","componets/Dialogs/Message/Message.tsx","componets/Dialogs/DialogForm/DialogForm.tsx","componets/Dialogs/DialogsContainer.ts","componets/Dialogs/Dialogs.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","data","WithAuthRedirect","Component","connect","props","restProps","to","PATH","LOGIN","module","exports","DialogItem","id","name","className","s","dialog","activeClassName","active","Message","text","message","maxLengthInFormOfPost30","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","placeholder","validate","required","SuperButton","compose","dialogs","dialogPage","messages","dispatch","addMessage","newMessage","addMessageActionCreator","dialogElements","map","d","messageElements","m","dialog_item","values","addMessageBody"],"mappings":"kNAUMA,EAA6B,SAACC,GAAD,MAA0D,CACzFC,OAAQD,EAAME,KAAKC,KAAKF,SAGrB,SAASG,EAAoBC,GAShC,OAAOC,YAAQP,EAARO,EARP,SAA2BC,GACvB,IAAKN,EAAwBM,EAAxBN,OAAWO,EAAhB,YAA6BD,EAA7B,GACA,OAAKN,EAED,cAACI,EAAD,eAAeG,IAFC,cAAC,IAAD,CAAUC,GAAIC,IAAKC,a,oBChB/CC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,oBCA7KD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,oBCA/DD,EAAOC,QAAU,CAAC,QAAU,2B,uICebC,EAPmC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KACpD,OACI,qBAAKC,UAAWC,IAAEC,OAAlB,SACI,cAAC,IAAD,CAASV,GAAI,YAAcM,EAAIK,gBAAiBF,IAAEG,OAAlD,SAA2DL,O,kBCExDM,EAP6B,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAC1C,OACI,qBAAKN,UAAWC,IAAEM,QAAlB,SACKD,K,0CCAPE,EAA0BC,YAAiB,IAoBpCC,EAAsBC,YAAwB,CAACC,KAAM,kBAA/BD,EAlB+B,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAChE,OAAO,uBAAMC,SAAUD,EAAhB,UACH,8BACI,cAACE,EAAA,EAAD,CAAOC,UAAWC,IACXlB,KAAM,iBACNmB,YAAa,cACbC,SAAU,CAACC,IAAUZ,OAGhC,8BACI,cAACa,EAAA,EAAD,CAAarB,UAAW,YAAxB,0B,gBCaGsB,sBACXnC,IACAE,aAhBkB,SAACN,GACnB,MAAO,CACHwC,QAASxC,EAAMyC,WAAWD,QAC1BE,SAAU1C,EAAMyC,WAAWC,SAC3BzC,OAAQD,EAAME,KAAKC,KAAKF,WAGP,SAAC0C,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,EAASG,YAAwBD,SAI9BN,EClBoC,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,QAASE,EAAkC,EAAlCA,SAAUE,EAAwB,EAAxBA,WAAY3C,EAAY,EAAZA,OAE5E8C,EAAiBP,EAAQQ,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAYlC,GAAIkC,EAAElC,GAAeC,KAAMiC,EAAEjC,MAAdiC,EAAElC,OACjEmC,EAAkBR,EAASM,KAAI,SAACG,GAAD,OAAO,cAAC,EAAD,CAAS5B,KAAM4B,EAAE3B,SAAc2B,EAAEpC,OAI3E,OAAKd,EAGD,sBAAKgB,UAAWC,IAAEsB,QAAlB,UACI,qBAAKvB,UAAWC,IAAEkC,YAAlB,SACKL,IAEL,sBAAK9B,UAAWC,IAAEwB,SAAlB,UACKQ,EACD,8BACI,cAACvB,EAAD,CAAqBI,SAbb,SAACsB,GACrBT,EAAWS,EAAOC,2BAEF,cAAC,IAAD,CAAU7C,GAAIC,IAAKC","file":"static/js/5.1ab3464e.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport { PATH } from \"../App\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.data.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsForRedirectType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return (\r\n            <Component {...restProps as T} />\r\n        );\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2FFqO\",\"dialog_item\":\"Dialogs_dialog_item__1lBu5\",\"active\":\"Dialogs_active__252Ch\",\"dialog\":\"Dialogs_dialog__3sTL-\",\"messages\":\"Dialogs_messages__24QOH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__2u-K9\",\"active\":\"DialogItem_active__3BkDp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3uaRk\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogItem.module.css';\r\n\r\ntype DialogItemPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemPropsType> = ({id, name}) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + id} activeClassName={s.active}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\nconst Message: React.FC<MessagePropsType> = ({text}) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport SuperButton from \"../../Common/superButton/SuperButton\";\r\n\r\nexport type FormDataType = {\r\n    message: string\r\n}\r\n\r\nconst maxLengthInFormOfPost30 = maxLengthCreator(30)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea}\r\n                   name={'addMessageBody'}\r\n                   placeholder={'Add message'}\r\n                   validate={[required, maxLengthInFormOfPost30]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <SuperButton className={\"btn-jelly\"}>\r\n                Send\r\n            </SuperButton>\r\n        </div>\r\n    </form>\r\n\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form: 'AddMessageForm'})(AddMessageForm)\r\n","import {\r\n    addMessageActionCreator,\r\n    DialogsType,\r\n    MessagesType\r\n} from '../../Redux/dialogs-reducer'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogPage.dialogs,\r\n        messages: state.dialogPage.messages,\r\n        isAuth: state.auth.data.isAuth,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessage) => {\r\n            dispatch(addMessageActionCreator(newMessage))\r\n        }\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    WithAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {AddMessageFormRedux} from \"./DialogForm/DialogForm\";\r\nimport {DialogsType, MessagesType} from \"../../Redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../App\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    addMessage: (values: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogs, messages, addMessage, isAuth}) => {\r\n\r\n    let dialogElements = dialogs.map((d) => <DialogItem id={d.id} key={d.id} name={d.name}/>);\r\n    let messageElements = messages.map((m) => <Message text={m.message} key={m.id}/>);\r\n    let addMessageHandler = (values: any) => {\r\n        addMessage(values.addMessageBody)\r\n    };\r\n    if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialog_item}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                <div>\r\n                    <AddMessageFormRedux onSubmit={addMessageHandler}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}