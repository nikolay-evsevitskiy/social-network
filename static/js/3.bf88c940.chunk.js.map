{"version":3,"sources":["hoc/WithAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","assets/images/5546667.png","componets/Profile/ProfileInfo/ProfileInfo.module.css","componets/Profile/Profile.module.css","componets/Profile/MyPosts/MyPosts.module.css","componets/Profile/MyPosts/Post/Post.module.css","componets/Profile/MyPosts/ProfileForm/ProfileformMyPosts.module.css","componets/Profile/ProfileInfo/ProfileStatus/ProfileStatusOnFunctionComponent.tsx","componets/Profile/ProfileInfo/ProfiledataForm.tsx","componets/Profile/ProfileInfo/ProfileInfo.tsx","componets/Profile/MyPosts/Post/Post.tsx","componets/Profile/MyPosts/ProfileForm/ProfileFormMyPosts.tsx","componets/Profile/MyPosts/MyPosts.tsx","componets/Profile/MyPosts/MyPostsContainer.ts","componets/Profile/Profile.tsx","componets/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","data","WithAuthRedirect","Component","connect","props","restProps","to","PATH","LOGIN","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","ProfileStatusOnFC","statusProps","updateStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","type","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","isOwner","savePhoto","contactsData","keys","contacts","onSubmit","target","files","SuperButton","className","s","formSummaryError","Field","component","Input","validate","required","name","placeholder","map","key","style","contact","Textarea","ProfileData","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","job","Contact","ProfileInfo","profileUpdateStatus","saveProfile","photos","Preloader","isFetching","goEditMode","editButton","onClick","alt","src","large","userPhoto","mainPhoto","profileInfo","formData","initialValues","Post","item","message","maxLength10","maxLengthCreator","AddPostFormRedux","button","MyPosts","React","PureComponent","memo","postElements","posts","p","likes","id","main","inputBlock","values","addPost","addPostBody","MyPostsContainer","profilePage","dispatch","postAdd","Profile","content","newPostText","ProfileAPIComponent","userId","this","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.bf88c940.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport { PATH } from \"../App\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.data.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsForRedirectType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={PATH.LOGIN}/>\r\n        return (\r\n            <Component {...restProps as T} />\r\n        );\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default __webpack_public_path__ + \"static/media/5546667.a94eb87e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutMe\":\"ProfileInfo_aboutMe__2S6Ra\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3nI76\",\"contact\":\"ProfileInfo_contact__OeY-b\",\"contacts\":\"ProfileInfo_contacts__2l8ea\",\"editButton\":\"ProfileInfo_editButton__3x3Fw\",\"profileInfo\":\"ProfileInfo_profileInfo__2amDX\",\"job\":\"ProfileInfo_job__332Pt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1tuP6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"MyPosts_main__2wbN9\",\"inputBlock\":\"MyPosts_inputBlock__2G0OD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3g4jw\",\"message\":\"Post_message__10sAs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ProfileformMyPosts_button__32OoT\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    statusProps: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusOnFC: React.FC<ProfileStatusType> = ({statusProps, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(statusProps)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    useEffect(() => {\r\n        if (statusProps !== status) {\r\n            setStatus(statusProps)\r\n        }\r\n    }, [statusProps])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && <div>\r\n                <span onDoubleClick={activateEditMode}><b>{statusProps || 'No status'}</b></span>\r\n            </div>}\r\n            {editMode && <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       type=\"text\"\r\n                       value={status}/>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusOnFC;\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {ProfileStateType} from \"../../../Redux/profile-reducer\";\r\nimport style from './ProfileInfo.module.css'\r\nimport s from '../../Common/FormsControls/FormControl.module.css'\r\nimport SuperButton from \"../../Common/superButton/SuperButton\";\r\n\r\nexport type FormDataType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n\r\n}\r\ntype FormPropsType = {\r\n    profile: ProfileStateType\r\n    isOwner: boolean\r\n    savePhoto: (value: any) => void\r\n\r\n\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, FormPropsType> & FormPropsType> =\r\n    ({profile, handleSubmit, error, isOwner, savePhoto}) => {\r\n        const contactsData = Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>\r\n        const onMainPhotoSelected = (e: any) => {\r\n            if (e.target.files.length) {\r\n                savePhoto(e.target.files[0])\r\n            }\r\n        }\r\n\r\n\r\n        return <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n            <div>\r\n                <SuperButton className={\"green\"}>\r\n                    save\r\n                </SuperButton>\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <b>Full name:</b> {\r\n                <Field component={Input}\r\n                       validate={[required]}\r\n                       type=\"text\"\r\n                       name={\"fullName\"}\r\n                       placeholder={'Full name'}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> {\r\n                <Field component={Input}\r\n                       validate={[required]}\r\n                       type=\"text\"\r\n                       name={\"aboutMe\"}\r\n                       placeholder={'About me'}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>\r\n                {contactsData.map(key => {\r\n                    return <div className={style.contact} key={key}>\r\n                        <b>{key}: <Field component={Input}\r\n                                         type=\"text\"\r\n                                         name={\"contacts.\" + key}\r\n                                         placeholder={key}\r\n                        /></b>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div>\r\n                LOOKING FOR A JOB: {<Field component={Input}\r\n                                           type='checkbox'\r\n                                           name={'lookingForAJob'}/>} yes\r\n            </div>\r\n            <div>\r\n                <b>Professional skills:</b> {\r\n                <Field component={Textarea}\r\n                       validate={[required]}\r\n                       type=\"text\"\r\n                       name={\"lookingForAJobDescription\"}\r\n                       placeholder={\"Professional skills\"}\r\n                />}\r\n            </div>\r\n        </form>\r\n    }\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<FormDataType, FormPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {ProfileStateType} from \"../../../Redux/profile-reducer\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport style from './ProfileInfo.module.css'\r\nimport ProfileStatusOnFC from './ProfileStatus/ProfileStatusOnFunctionComponent';\r\nimport userPhoto from \"../../../assets/images/5546667.png\";\r\nimport {FormDataType, ProfileDataFormReduxForm} from \"./ProfiledataForm\";\r\nimport SuperButton from \"../../Common/superButton/SuperButton\";\r\n\r\ntype ProfileInfoType = {\r\n    isOwner: boolean\r\n    profile: ProfileStateType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (value: any) => void\r\n    saveProfile: (value: FormDataType) => void\r\n    profileUpdateStatus: \"success\" | \"error\"\r\n}\r\ntype ProfileDataType = {\r\n    profile: ProfileStateType\r\n    isOwner: boolean\r\n    goEditMode: () => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({\r\n                                                    profileUpdateStatus,\r\n                                                    profile,\r\n                                                    status,\r\n                                                    updateStatus,\r\n                                                    isOwner,\r\n                                                    savePhoto,\r\n                                                    saveProfile\r\n                                                }) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    if (!profile.photos || !profile) {\r\n        return <Preloader isFetching={true}/>\r\n    }\r\n\r\n    const goEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onSubmit = (formData: FormDataType) => {\r\n        saveProfile(formData)\r\n        profileUpdateStatus === \"success\" && setEditMode(false)\r\n    }\r\n    return (\r\n        <div>\r\n            {isOwner && <div className={style.editButton}>\r\n                <SuperButton onClick={goEditMode} className={\"yellow\"}>edit</SuperButton>\r\n            </div>}\r\n            <div>\r\n                <div>\r\n                    <img alt={'Profile'} src={profile.photos.large || userPhoto} className={style.mainPhoto}/>\r\n\r\n                    <div className={style.profileInfo}>\r\n                        <b>Status:</b> <ProfileStatusOnFC statusProps={status} updateStatus={updateStatus}/>\r\n                    </div>\r\n                    {editMode ?\r\n                        <ProfileDataFormReduxForm isOwner={isOwner} savePhoto={savePhoto} onSubmit={onSubmit}\r\n                                                  initialValues={profile} profile={profile}/> :\r\n                        <ProfileData profile={profile} isOwner={isOwner} goEditMode={goEditMode}/>}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile}) => {\r\n    const contactsData = Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>\r\n    return <>\r\n        <div className={style.aboutMe}>\r\n            <div><b>Full name:</b> {profile.fullName}</div>\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>Professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n        <div className={style.contacts}>\r\n            <div>\r\n                <h3>Contacts:</h3>\r\n            </div>\r\n            <div>\r\n                {contactsData.map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n\r\n        <div className={style.job}>\r\n            LOOKING FOR A JOB: {profile.lookingForAJob ? \"YES!!!\" : \"NO\"}\r\n        </div>\r\n    </>\r\n}\r\nconst Contact: React.FC<{ contactTitle: string, contactValue: string | null }> =\r\n    ({contactTitle, contactValue}) => {\r\n        return <div className={style.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n    }\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype messagePropsType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nfunction Post(props:messagePropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n                <img src=\"https://www.esafety.gov.au/sites/default/files/2019-08/Remove%20images%20and%20video.jpg\"/>\r\n                <div className={s.message}>{props.message}</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport SuperButton from \"../../../Common/superButton/SuperButton\";\r\nimport style from \"./ProfileformMyPosts.module.css\"\r\n\r\ntype FormDataProfileType = {\r\n    values: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const ProfileFormMyPosts: React.FC<InjectedFormProps<FormDataProfileType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea}\r\n                   name={'addPostBody'}\r\n                   placeholder={'Add post...'}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n        </div>\r\n        <div className={style.button}>\r\n            <SuperButton>\r\n                Add post\r\n            </SuperButton>\r\n        </div>\r\n    </form>\r\n\r\n}\r\n\r\nexport const AddPostFormRedux = reduxForm<FormDataProfileType>({form: 'AddPostForm'})(ProfileFormMyPosts)\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostsType} from \"../../../Redux/profile-reducer\";\r\nimport {AddPostFormRedux} from \"./ProfileForm/ProfileFormMyPosts\";\r\n\r\ntype PropType = {\r\n    addPost: (value: string) => void\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\nexport class MyPostsComponent extends React.PureComponent<PropType> {\r\n\r\n\r\n    render() {\r\n        const addPost = (values: any) => {\r\n            this.props.addPost(values.addPostBody)\r\n        }\r\n        const postElements = this.props.posts.map((p) => <Post message={p.message} likes={p.likes} key={p.id}/>)\r\n        return (\r\n            <div className={s.main}>\r\n                <div>\r\n                    My posts\r\n                </div>\r\n                <div>\r\n                    <AddPostFormRedux onSubmit={addPost}/>\r\n                </div>\r\n                {postElements}\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropType) => {\r\n\r\n        const addPost = (values: any) => {\r\n            props.addPost(values.addPostBody)\r\n        }\r\n        const postElements = props.posts.map((p) => <Post message={p.message} likes={p.likes} key={p.id}/>)\r\n        return (\r\n            <div className={s.main}>\r\n                <div className={s.inputBlock}>\r\n                    <div>\r\n                        <h3>My posts</h3>\r\n                    </div>\r\n                    <div>\r\n                        <AddPostFormRedux onSubmit={addPost}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    {postElements}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n)\r\n\r\nexport default MyPosts;\r\n","import {postAdd, PostsType} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: (value: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (value: string) => {\r\n            dispatch(postAdd(value))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileStateType} from \"../../Redux/profile-reducer\";\r\nimport {FormDataType} from \"./ProfileInfo/ProfiledataForm\";\r\n\r\ntype ProfileType = {\r\n    isOwner: boolean\r\n    profile: ProfileStateType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (value: any) => void\r\n    saveProfile: (value: FormDataType) => void\r\n    profileUpdateStatus: \"success\" | \"error\"\r\n}\r\n\r\nexport const Profile: React.FC<ProfileType> = ({profileUpdateStatus, profile, status, updateStatus, isOwner,savePhoto, saveProfile}) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateStatus={updateStatus}\r\n                isOwner={isOwner}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile}\r\n                profileUpdateStatus={profileUpdateStatus}\r\n            />\r\n            <MyPostsContainer newPostText={'CHECK'}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileStateType, updateStatus, savePhoto, saveProfile} from \"../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {Profile} from \"./Profile\";\r\nimport {FormDataType} from \"./ProfileInfo/ProfiledataForm\";\r\nimport { PATH } from \"../../App\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileStateType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserId: number | null\r\n    profileUpdateStatus: \"success\" | \"error\"\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    saveProfile: (value: FormDataType) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = OwnPropsType & RouteComponentProps<PathParamsType>\r\n\r\n\r\nclass ProfileAPIComponent extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(PATH.LOGIN)\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile isOwner={!this.props.match.params.userId}\r\n                        profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n                        savePhoto={this.props.savePhoto}\r\n                        saveProfile={this.props.saveProfile}\r\n                        profileUpdateStatus={this.props.profileUpdateStatus}\r\n        />\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    isAuth: state.auth.data.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.data.id,\r\n    profileUpdateStatus: state.profilePage.profileUpdateStatus\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        updateStatus,\r\n        getStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    })\r\n)(ProfileAPIComponent)\r\n"],"sourceRoot":""}